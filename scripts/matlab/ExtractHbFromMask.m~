function ExtractHbFromMask(subjectListFile)

fileID = fopen(subjectListFile,'r');
if fileID < 0
    error 'Failed to open the subjectListFile for reading'
end

%VAM - Update to support updates to the driver file
%   set useLegacyCode=1 to revert back to old behavior
useLegacyCode = 0;
if ( useLegacyCode )
  subjectList = textscan(fileID,'%s %s %s %s %s %s %s %s %s %s %s %s %s');
else
  tline = fgetl(fileID);
  firstLine=1;
  while ischar(tline)
      tmp=strsplit(tline);
      if (size(tmp{1}) == 0)
        break
      end
      if (firstLine == 1)
        subjectList=tmp;
        firstLine=0;
        numItems=size(tmp);
      else
        for i=1:numItems(2)
          subjectList{i}=[subjectList{i};{tmp{i}}];
        end
      end
      tline = fgetl(fileID);
  end
end
fclose(fileID);

%JPS added to pull out unique subjects
%needed in cases where input file has multiple rows with
%data from multiple sessions per subject
subjectListTemp = subjectList;
[subjects2,uindex]=unique(subjectListTemp{1,1});
for x=1:size(subjectListTemp,2)
    for y=1:size(uindex,1)
        subjectList2{x}{y,1} = subjectListTemp{x}{uindex(y)};
    end
end

clear subjectList;
subjectList = subjectList2;

subjects=subjectList{1,1};

%changed to dim1 by JPS
numSubjects=size(subjects,1);

for n=1:numSubjects
    
    sID=subjects{n}
    
    inputFileStr=strcat(subjectList{5}{n}, '/',sID,'*_ND.mat');
    files=dir(inputFileStr);
    
    foldernames = {files.folder};
    files = {files.name};
    filenames = strcat(foldernames,'/',files);
    
    numRuns=size(filenames,2);
    
    runCt = 0;
    for r=1:numRuns
        
        varName2 = ['run' int2str(r)];
        NDFile=strcat(subjectList{5}{n},'/',sID,'_',varName2,'_ND.mat');
        
        %Load NeuroDOT image file: data are voxels x time
        load(NDFile,'-mat');

        %Load mask in subject space
        MaskName=strcat(sID,'_clust_EffectMask');
        MaskPath=strcat(subjectList{16}{n},'/');
        [MaskData, header] = LoadVolumetricData(MaskName,MaskPath,'nii');
        
        %load headvol (not really needed unless checking data)
        checkName3=strcat(sID,'_headvol2mm');
        [checkData3,header3] = LoadVolumetricData(checkName3,MaskPath,'nii');
        
%         %code to view data to ensure everything lines up
%         GVmask=Good_Vox2vol(ones(length(info.tissue.dim.Good_Vox),1),info.tissue.dim);
%         PlotSlices(checkData3,header3,[],GVmask); %q to exit viewer
%         PlotSlices(checkData3,header3,[],MaskData);
%         PlotSlices(MaskData,header,[],GVmask);
        
        %iterate through the mask until no new entries
        i=1;
        while 
        for i = 1:MaxMaskValue
            keepVox = find(MaskData(:) == i);
% %             keepVox = find(Mask1D(:) == i);
            [~,keepGood]=ismember(keepVox,info.tissue.dim.Good_Vox);
            keepGood(keepGood==0)=[];
            HbO_cluster_only = cortex_HbO(keepGood,:);
            HbO_TimeTrace=mean(HbO_cluster_only,1);
            HbR_cluster_only = cortex_HbR(keepGood,:);
            HbR_TimeTrace=mean(HbR_cluster_only,1);
            
            %plot the time traces along with the stim events for learned
            %and unlearned
            plot(HbO_TimeTrace)
            hold
            plot(HbR_TimeTrace,'r')
            stimsL = find(info.paradigm.synchtype == 1 | info.paradigm.synchtype == 4);
            stimsUL = find(info.paradigm.synchtype == 2 | info.paradigm.synchtype == 5);
            for j=1:size(stimsL,1)
                xline(info.paradigm.synchpts(stimsL(j),1),'g')
            end
            for j=1:size(stimsUL,1)
                xline(info.paradigm.synchpts(stimsUL(j),1),'b')
            end
            hold off
            
            
            
            %output timeseries for each mask...
            %need to look at WTC code to create dummy .nirs file
            
            %what about opening the orig .nirs file, replacing channels
            %with new HbO and HbR data and then writing to new file. Then
            %WTC code should work as is...
            
            %info.paradigm.synchpts = timings
            %info.paradigm.synchtype = stim marks
            %so figure out which stims I need to write and then create a
            %new s matrix. then output s matrix and HbO and HbR time series
            %to a mock .nirs file that can be read by WTC code.
            %need to replicate the Child and Parent folders within
            %Coherence_Child? Or just child in this folder, and parent in
            %the other, then update paths in WTC.
            
        end
        
        %compute either weighted mean over runs (based on stims per run)
        %or concatenate data and do one call to block average. Here, need
        %to update stim timings to point toward concat data, and also
        %update number of synchpts accordingly...
        
        %now extract block average time series...
        SamplingFreq=10;
        dt=10*SamplingFreq;
        [BA_out,BSTD_out,BT_out,blocks] = BlockAverage(HbO_cluster_only, info.paradigm.synchpts(stimsL), dt);

        figure;
        y = mean(BA_out); % your mean vector;
        sdtime = mean(BSTD_out); 
        x = 1:numel(y);
        curve1 = y + sdtime./2;
        curve2 = y - sdtime./2;
        x2 = [x, fliplr(x)];
        inBetween = [curve1, fliplr(curve2)];
        fill(x2, inBetween, 'g');
        hold on;
        plot(x, y, 'r', 'LineWidth', 2);
        
        %repeat for unlearned
        [BA_out,BSTD_out,BT_out,blocks] = BlockAverage(HbO_cluster_only, info.paradigm.synchpts(stimsUL), dt);

        figure;
        y = mean(BA_out); % your mean vector;
        sdtime = mean(BSTD_out); 
        x = 1:numel(y);
        curve1 = y + sdtime./2;
        curve2 = y - sdtime./2;
        x2 = [x, fliplr(x)];
        inBetween = [curve1, fliplr(curve2)];
        fill(x2, inBetween, 'g');
        hold on;
        plot(x, y, 'r', 'LineWidth', 2);      
    end
end

